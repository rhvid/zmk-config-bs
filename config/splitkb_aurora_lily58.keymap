/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/*
* out commented 2024.02.19
*
* #include <dt-bindings/zmk/mouse.h>
* #include <dt-bindings/zmk/backlight.h>
* #include <dt-bindings/zmk/rgb.h>
* #include <dt-bindings/zmk/ext_power.h>
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/*
* out commented 2024.02.19
*
* &led_strip { chain-length = <29>; };
*/

&left_encoder { steps = <72>; };

&right_encoder { steps = <72>; };

&sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&left_encoder &right_encoder>;
    triggers-per-rotation = <36>;
};

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
    tapping-term-ms = <175>;
};

/ {
    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        light: light {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bl BL_SET 100>;
            label = "LIGHT";
        };

        DK_QMARK: DK_QMARK {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt UNDERSCORE>;
            label = "DK_QMARK";
        };

        DK_APOS: DK_APOS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUHS>;
            label = "DK_APOS";
        };

        DK_LESS: DK_LESS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUBS>;
            label = "DK_LESS";
        };

        DK_GREATER: DK_GREATER {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LS(NUBS)>;
            label = "DK_GREATER";
        };

        DK_PIPE: DK_PIPE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(EQUAL)>;
            label = "DK_PIPE";
        };
    };

    behaviors {
        lt_backspace: lt_backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BACKSPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
        };

        tap_dance: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp DEL>, <&to 1>;
        };

        lt_tap_kp: lt_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_TAP_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        mt_index_finger: mt_index_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_INDEX_FINGER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        ToBase {
            bindings = <&to 0>;
            key-positions = <52 55>;
        };

        toMouse {
            bindings = <&to 3>;
            key-positions = <57 50>;
        };

        toBT00 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <25 26 27 28>;
        };

        toBT01 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <31 32 33 34>;
        };

        outputToggle {
            bindings = <&out OUT_TOG>;
            key-positions = <25 26 27 28 31 32 33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&trans          &kp N1      &kp N2      &kp N3       &kp N4                         &kp N5                                                  &kp N6                     &kp N7                    &kp N8         &kp N9          &kp N0              &kp RBKT
&trans          &kp Q       &kp W       &kp E        &kp R                          &kp T                                                   &kp Y                      &kp U                     &kp I          &kp O           &kp P               &kp LEFT_BRACKET
&kp LEFT_SHIFT  &mt LGUI A  &mt LALT S  &mt LCTRL D  &mt_index_finger LEFT_SHIFT F  &kp G                                                   &kp H                      &mt_index_finger RSHFT J  &mt RCTRL K    &mt LEFT_ALT L  &mt RIGHT_GUI SEMI  &kp APOS
&kp LCTRL       &kp Z       &kp X       &kp C        &kp V                          &kp B             &kp C_MUTE    &mt LC(N0) PRINTSCREEN  &kp N                      &kp M                     &kp COMMA      &kp PERIOD      &kp FSLH            &mt RIGHT_SHIFT CAPSLOCK
                                        &trans       &kp ESCAPE                     &lt_tap_kp 1 TAB  &kp SPACE     &kp ENTER               &lt_backspace 2 BACKSPACE  &tap_dance                &mt RALT NUHS
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&inc_dec_kp LC(KP_MINUS) LC(KP_PLUS)>;
        };

        lower_layer {
            bindings = <
&out OUT_BLE  &bt BT_SEL 0   &bt BT_SEL 1       &bt BT_SEL 2     &trans                                   &bt BT_CLR                    &trans      &trans        &trans        &trans        &trans       &trans
&out OUT_USB  &trans         &trans             &kp RA(N8)       &kp RA(N9)                               &trans                        &kp UNDER   &kp N7        &kp N8        &kp N9        &trans       &trans
&trans        &mt LGUI NUBS  &mt LALT LS(NUBS)  &mt LCTRL ASTRK  &mt_index_finger LSHFT LEFT_PARENTHESIS  &trans                        &kp LS(N0)  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_PLUS  &kp PIPE
&trans        &kp NUBS       &kp LS(NUBS)       &kp RA(N7)       &kp RA(N0)                               &trans      &trans    &trans  &kp N0      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans       &DK_PIPE
                                                &kp DEL          &trans                                   &trans      &trans    &trans  &trans      &kp COMMA     &kp PERIOD
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        raise_layer {
            bindings = <
&trans  &kp F1        &kp F2           &kp F3               &kp F4                          &kp F5                    &kp F6  &kp F7    &kp F8          &kp F9     &kp F10    &kp F11
&trans  &trans        &kp F7           &kp F8               &kp F9                          &trans                    &trans  &kp HOME  &kp UP_ARROW    &kp END    &kp PG_UP  &kp F12
&trans  &trans        &mt LEFT_ALT F4  &mt LEFT_CONTROL F5  &mt_index_finger LEFT_SHIFT F6  &trans                    &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp PG_DN  &trans
&trans  &kp RA(NUBS)  &kp F1           &kp F2               &kp F3                          &trans  &trans    &trans  &trans  &trans    &trans          &trans     &trans     &trans
                                       &trans               &trans                          &trans  &trans    &trans  &trans  &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>, <&inc_dec_kp UP DOWN>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans        &trans   &trans        &trans                        &trans  &trans  &trans  &trans  &trans  &kp DELETE
&trans  &trans  &kp N7        &kp N8   &kp N9        &trans                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_4  &kp N5   &kp NUMBER_6  &trans                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N0  &kp N1        &kp N2   &kp NUMBER_3  &trans      &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                              &kp DEL  &kp COMMA     &kp PERIOD  &trans    &trans  &trans  &to 0   &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>, <&inc_dec_kp UP DOWN>;
        };
    };
};
