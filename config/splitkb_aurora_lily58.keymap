/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/*
* out commented 2024.02.19
*
* #include <dt-bindings/zmk/mouse.h>
* #include <dt-bindings/zmk/backlight.h>
* #include <dt-bindings/zmk/rgb.h>
* #include <dt-bindings/zmk/ext_power.h>
*/

#include <locale/keys_da.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/*
* out commented 2024.02.19
*
* &led_strip { chain-length = <29>; };
*/

&left_encoder { steps = <72>; };

&right_encoder { steps = <72>; };

&sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&left_encoder &right_encoder>;
    triggers-per-rotation = <36>;
};

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
    tapping-term-ms = <175>;
};

/ {
    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        caret: caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RIGHT_BRACE) &kp SPACE>;
            label = "CARET";
        };
    };

    behaviors {
        lt_backspace: lt_backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BACKSPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
        };

        tap_dance: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp DEL>, <&to 1>;
        };

        lt_tap_kp: lt_tap_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_TAP_KP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        mt_index_finger: mt_index_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_INDEX_FINGER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        toBT00 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <25 26 27 28>;
        };

        toBT01 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <31 32 33 34>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <52 51>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <39 40>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&trans          &kp DA_N1               &kp DA_N2           &kp DA_N3           &kp DA_N4                         &kp DA_N5                                                    &kp DA_N6                     &kp DA_N7                    &kp DA_N8         &kp DA_N9          &kp DA_N0              &kp RBKT
&trans          &kp DA_Q                &kp DA_W            &kp DA_E            &kp DA_R                          &kp DA_T                                                     &kp DA_Y                      &kp DA_U                     &kp DA_I          &kp DA_O           &kp P                  &kp DA_A_RING
&kp LEFT_SHIFT  &mt LGUI DA_A           &mt LALT DA_S       &mt LCTRL DA_D      &mt_index_finger LEFT_SHIFT DA_F  &kp DA_G                                                     &kp DA_H                      &mt_index_finger RSHFT DA_J  &mt RCTRL DA_K    &mt LEFT_ALT DA_L  &mt LEFT_GUI DA_AE     &kp DA_O_SLASH
&kp LCTRL       &kp DA_Z                &kp DA_X            &kp DA_C            &kp DA_V                          &kp DA_B             &lt 1 C_MUTE    &mt LC(N0) PRINTSCREEN  &kp DA_N                      &kp DA_M                     &kp DA_COMMA      &kp DA_PERIOD      &kp DA_MINUS           &kp DA_APOS
                                        &trans       &kp ESCAPE         &lt_tap_kp 1 TAB    &kp DA_SPACE                                    &kp ENTER          &lt_backspace 2 BACKSPACE  &mt RALT DEL    &mt RALT DA_APOS
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&inc_dec_kp LC(SLASH) LC(MINUS)>;
        };

        number_layer {
            bindings = <
&out OUT_BLE    &bt BT_SEL 0            &bt BT_SEL 1        &bt BT_SEL 2        &trans                              &bt BT_CLR                                                  &trans                          &trans                      &trans          &trans          &trans     &trans
&out OUT_USB    &trans                  &trans              &kp DA_LEFT_BRACKET &kp DA_RIGHT_BRACKET                &trans                                                      &kp DA_QMARK                    &kp DA_N7                   &kp DA_N8       &kp DA_N9       &caret     &trans
&trans          &mt LGUI DA_LESS_THAN   &mt LALT DA_GT      &mt LCTRL DA_LPAR   &mt_index_finger LSHFT DA_RPAR      &kp PRINTSCREEN                                             &kp DA_EQUAL                    &kp DA_N4  &kp DA_N5        &kp DA_N6       &kp DA_PLUS     &kp DA_ASTERISK
&trans          &kp DA_BACKSLASH        &kp LS(NUBS)        &kp DA_LEFT_BRACE   &kp DA_RIGHT_BRACE                  &trans           &trans    &trans                           &kp DA_N0                       &kp DA_N1  &kp DA_N2        &kp DA_N3       &trans          &kp DA_PIPE
                                                &kp DEL          &trans                                   &trans           &trans    &trans  &trans      &trans        &trans
            >;

            sensor-bindings =
                <&inc_dec_kp LC(SLASH) LC(MINUS)>,
                <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        navigation_layer {
            bindings = <
&trans  &kp F1        &kp F2           &kp F3               &kp F4                          &kp F5                     &kp F6  &kp F7            &kp F8            &kp F9     &kp F10    &kp F11
&trans  &trans        &kp F7           &kp F8               &kp F9                          &kp F10                    &trans  &kp HOME          &kp UP_ARROW      &kp END    &kp PG_UP  &kp F12
&trans  &trans        &mt LEFT_ALT F4  &mt LEFT_CONTROL F5  &mt_index_finger LEFT_SHIFT F6  &kp F11                    &trans  &kp LEFT          &kp DOWN_ARROW    &kp RIGHT  &kp PG_DN  &trans
&trans  &kp DA_BACKSLASH  &kp F1           &kp F2               &kp F3                          &kp F12  &trans    &trans  &trans  &kp DA_DOLLAR  &kp DA_AT  &trans     &trans     &trans
                                       &trans               &trans                          &trans   &trans    &trans  &trans  &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>, <&inc_dec_kp UP DOWN>;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans        &trans   &trans        &trans                        &trans  &trans        &trans        &trans        &trans  &kp DELETE
&trans  &trans  &kp N7        &kp N8   &kp N9        &trans                        &trans  &kp N7        &kp N8        &kp N9        &trans  &kp DA_UNDERSCORE
&trans  &trans  &kp NUMBER_4  &kp N5   &kp NUMBER_6  &trans                        &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &trans
&trans  &kp N0  &kp N1        &kp N2   &kp NUMBER_3  &trans      &trans    &trans  &kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                              &kp DEL  &kp COMMA     &kp PERIOD  &trans    &trans  &trans  &kp COMMA     &kp PERIOD
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>, <&inc_dec_kp UP DOWN>;
        };
    };
};
